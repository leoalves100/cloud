# Template Spec: https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml
# Golang function: https://www.serverless.com/blog/framework-example-golang-lambda-support 
# WebSocket Ex: https://www.serverless.com/framework/docs/providers/aws/events/websocket
# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: leocorp
# "service" is the name of this project. This will also be added to your AWS resource names.
service: websocket-example-golang

plugins:
  - serverless-go-plugin # https://github.com/mthenw/serverless-go-plugin
  - serverless-offline # https://github.com/dherault/serverless-offline

# https://www.serverless.com/framework/docs/providers/aws/guide/credentials
stages:
  default:
    resolvers:
      leoalves100:
        type: aws
        profile: leoalves100
        region: us-east-1

provider:
  name: aws
  resolver: leoalves100
  # Não suporta o serverless-offline para essa versão de runtime 
  # Ref: https://github.com/dherault/serverless-offline/issues/1152
  runtime: provided.al2
  architecture: arm64
  websocketsApiName: websocket-example-golang
  memorySize: 512
  apiGateway:
    usagePlan:
      throttle:
        rateLimit: 5
        burstLimit: 5

custom:
  go:
    supportedRuntimes: ['provided.al2']
    cmd: 'GOARCH=arm64 GOOS=linux go build -tags lambda.norpc -ldflags="-s -w"' 
    monorepo: true
    buildProvidedRuntimeAsBootstrap: true

functions:
  connectionHandler:
    handler: ./functions/connectionHandler/main.go
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
  default:
    handler: ./functions/default/main.go
    events:
      - websocket:
          route: $default